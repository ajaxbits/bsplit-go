// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package dbc

import (
	"context"
	"time"
)

const createGroup = `-- name: CreateGroup :one
insert into Groups (
    id
    , created_at
    , name
    , description
) values (
    ?1
    , current_timestamp
    , ?2
    , ?3
) returning id, created_at, name, description
`

type CreateGroupParams struct {
	ID          []byte  `json:"id"`
	Name        string  `json:"name"`
	Description *string `json:"description"`
}

func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) (GroupRaw, error) {
	row := q.db.QueryRowContext(ctx, createGroup, arg.ID, arg.Name, arg.Description)
	var i GroupRaw
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.Description,
	)
	return i, err
}

const createTransactionParticipants = `-- name: CreateTransactionParticipants :one
insert into TransactionParticipants (
    id
    , txn_id
    , user_id
    , share
) values (
    ?1
    , ?2
    , ?3
    , ?4
) returning id, txn_id, user_id, share
`

type CreateTransactionParticipantsParams struct {
	ID     []byte `json:"id"`
	TxnID  []byte `json:"txn_id"`
	UserID []byte `json:"user_id"`
	Share  int64  `json:"share"`
}

func (q *Queries) CreateTransactionParticipants(ctx context.Context, arg CreateTransactionParticipantsParams) (TransactionParticipant, error) {
	row := q.db.QueryRowContext(ctx, createTransactionParticipants,
		arg.ID,
		arg.TxnID,
		arg.UserID,
		arg.Share,
	)
	var i TransactionParticipant
	err := row.Scan(
		&i.ID,
		&i.TxnID,
		&i.UserID,
		&i.Share,
	)
	return i, err
}

const createTransactionRaw = `-- name: CreateTransactionRaw :one
insert into Transactions (
    id
    , created_at
    , type
    , description
    , amount
    , date
    , paid_by
    , group_id
) values (
    ?1
    , current_timestamp
    , ?2
    , ?3
    , ?4
    , ?5
    , ?6
    , ?7
) returning id, created_at, type, description, amount, date, paid_by, group_id
`

type CreateTransactionRawParams struct {
	ID          []byte    `json:"id"`
	Type        string    `json:"type"`
	Description string    `json:"description"`
	Amount      int64     `json:"amount"`
	Date        time.Time `json:"date"`
	PaidBy      []byte    `json:"paid_by"`
	GroupID     []byte    `json:"group_id"`
}

func (q *Queries) CreateTransactionRaw(ctx context.Context, arg CreateTransactionRawParams) (TransactionRaw, error) {
	row := q.db.QueryRowContext(ctx, createTransactionRaw,
		arg.ID,
		arg.Type,
		arg.Description,
		arg.Amount,
		arg.Date,
		arg.PaidBy,
		arg.GroupID,
	)
	var i TransactionRaw
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Type,
		&i.Description,
		&i.Amount,
		&i.Date,
		&i.PaidBy,
		&i.GroupID,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
insert into Users (
    id
    , created_at
    , name
    , venmo_id
) values (
    ?1
    , current_timestamp
    , ?2
    , ?3
) returning id, created_at, name, venmo_id
`

type CreateUserParams struct {
	ID      []byte  `json:"id"`
	Name    string  `json:"name"`
	VenmoID *string `json:"venmo_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.ID, arg.Name, arg.VenmoID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.VenmoID,
	)
	return i, err
}

const deleteGroup = `-- name: DeleteGroup :exec
delete from Groups
where
    id = ?1
`

func (q *Queries) DeleteGroup(ctx context.Context, id []byte) error {
	_, err := q.db.ExecContext(ctx, deleteGroup, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
delete from Users
where
    id = ?1
`

func (q *Queries) DeleteUser(ctx context.Context, id []byte) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getAllGroups = `-- name: GetAllGroups :many
select
    id, created_at, name, description
from
    Groups
`

func (q *Queries) GetAllGroups(ctx context.Context) ([]GroupRaw, error) {
	rows, err := q.db.QueryContext(ctx, getAllGroups)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GroupRaw
	for rows.Next() {
		var i GroupRaw
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Name,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUsers = `-- name: GetAllUsers :many
select
    id, created_at, name, venmo_id
from
    Users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Name,
			&i.VenmoID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDebts = `-- name: GetDebts :many
with net_owed as (
    select 
        tp.user_id as debtor
        , t.paid_by as creditor
        , SUM(tp.share) as amount_owed
    from
        TransactionParticipants tp
    join
        Transactions t on tp.txn_id = t.id
    where
        t.type = 'expense' 
        and tp.user_id <> t.paid_by
    group by
        tp.user_id, t.paid_by
),
aggregate_net_owed as (
    select
        debtor_net_owed.debtor
        , debtor_net_owed.creditor
        , SUM(debtor_net_owed.amount_owed - COALESCE(creditor_net_owed.amount_owed, 0)) as net_amount
    from
        net_owed debtor_net_owed
    left join
        net_owed creditor_net_owed 
        on debtor_net_owed.debtor = creditor_net_owed.creditor 
        and debtor_net_owed.creditor = creditor_net_owed.debtor
    group by
        debtor_net_owed.debtor, debtor_net_owed.creditor
)
select 
    debtor
    , creditor
    , cast(net_amount as integer)
from 
    aggregate_net_owed
where
    net_amount > 0
order by 
    debtor, creditor
`

type GetDebtsRow struct {
	Debtor    []byte `json:"debtor"`
	Creditor  []byte `json:"creditor"`
	NetAmount int64  `json:"net_amount"`
}

func (q *Queries) GetDebts(ctx context.Context) ([]GetDebtsRow, error) {
	rows, err := q.db.QueryContext(ctx, getDebts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDebtsRow
	for rows.Next() {
		var i GetDebtsRow
		if err := rows.Scan(&i.Debtor, &i.Creditor, &i.NetAmount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGroup = `-- name: GetGroup :one
select
    id, created_at, name, description
from
    Groups
where
    id = ?1
`

func (q *Queries) GetGroup(ctx context.Context, id []byte) (GroupRaw, error) {
	row := q.db.QueryRowContext(ctx, getGroup, id)
	var i GroupRaw
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.Description,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
select
    id, created_at, name, venmo_id
from
    Users
where
    id = ?1
`

func (q *Queries) GetUser(ctx context.Context, id []byte) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.VenmoID,
	)
	return i, err
}
