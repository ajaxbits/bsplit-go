// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package dbc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createGroup = `-- name: CreateGroup :one
insert into Groups (
    id
    , created_at
    , name
    , description
) values (
    ?1
    , current_timestamp
    , ?2
    , ?3
) returning id, created_at, name, description
`

type CreateGroupParams struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Description *string   `json:"description"`
}

func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) (Group, error) {
	row := q.db.QueryRowContext(ctx, createGroup, arg.ID, arg.Name, arg.Description)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.Description,
	)
	return i, err
}

const createTransaction = `-- name: CreateTransaction :one
insert into Transactions (
    id
    , created_at
    , type
    , description
    , amount
    , date
    , paid_by
    , group_id
) values (
    ?1
    , current_timestamp
    , ?2
    , ?3
    , ?4
    , ?5
    , ?6
    , ?7
) returning id, created_at, type, description, amount, date, paid_by, group_id
`

type CreateTransactionParams struct {
	ID          uuid.UUID `json:"id"`
	Type        string    `json:"type"`
	Description string    `json:"description"`
	Amount      int64     `json:"amount"`
	Date        time.Time `json:"date"`
	PaidBy      uuid.UUID `json:"paid_by"`
	GroupID     uuid.UUID `json:"group_id"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.ID,
		arg.Type,
		arg.Description,
		arg.Amount,
		arg.Date,
		arg.PaidBy,
		arg.GroupID,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Type,
		&i.Description,
		&i.Amount,
		&i.Date,
		&i.PaidBy,
		&i.GroupID,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
insert into Users (
    id
    , created_at
    , name
    , venmo_id
) values (
    ?1
    , current_timestamp
    , ?2
    , ?3
) returning id, created_at, name, venmo_id
`

type CreateUserParams struct {
	ID      uuid.UUID `json:"id"`
	Name    string    `json:"name"`
	VenmoID *string   `json:"venmo_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.ID, arg.Name, arg.VenmoID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.VenmoID,
	)
	return i, err
}

const deleteGroup = `-- name: DeleteGroup :exec
delete from Groups
where
    id = ?1
`

func (q *Queries) DeleteGroup(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteGroup, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
delete from Users
where
    id = ?1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getAllGroups = `-- name: GetAllGroups :many
select
    id, created_at, name, description
from
    Groups
`

func (q *Queries) GetAllGroups(ctx context.Context) ([]Group, error) {
	rows, err := q.db.QueryContext(ctx, getAllGroups)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Group
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Name,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUsers = `-- name: GetAllUsers :many
select
    id, created_at, name, venmo_id
from
    Users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Name,
			&i.VenmoID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGroup = `-- name: GetGroup :one
select
    id, created_at, name, description
from
    Groups
where
    id = ?1
`

func (q *Queries) GetGroup(ctx context.Context, id uuid.UUID) (Group, error) {
	row := q.db.QueryRowContext(ctx, getGroup, id)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.Description,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
select
    id, created_at, name, venmo_id
from
    Users
where
    id = ?1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.VenmoID,
	)
	return i, err
}
